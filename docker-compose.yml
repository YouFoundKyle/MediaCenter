version: '3.7'
services:

    # https://hub.docker.com/r/plexinc/pms-docker
    plex:
        container_name: plex
        image: plexinc/pms-docker:latest
        restart: unless-stopped
        environment:
            PLEX_UID: '${PUID}'
            PLEX_GID: '${PGID}'
            TZ: '${TZ}'
            PLEX_CLAIM: '${PLEX_CLAIM}'
        networks:
            - traefik
        ports:
            - '32400:32400/tcp'
        volumes:
            - '${CONFIG_DIR}/plex:/config'
            - '${MEDIA_DIR}:/media'
            - '/tmp:/tmp'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.plex.entrypoints: https
            traefik.http.routers.plex.tls.certresolver: le
            #traefik.http.routers.plex.rule: Host(`plex.${ACME_DOMAIN}`) || Host(`${ACME_DOMAIN}`)
            #traefik.frontend.rule: 'Host:plex.${ACME_DOMAIN}'
            #traefik.frontend.rule: (Host(`${ACME_DOMAIN}`) && Path(`/plex`))
            traefik.http.services.plex_mediaserver.loadbalancer.server.port: 32400
            traefik.http.services.plex_mediaserver.loadbalancer.server.scheme: http
            traefik.http.routers.plex.rule: (Host(`${ACME_DOMAIN}`) && Path(`/plex/`))
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/plex/`))

    # https://hub.docker.com/r/linuxserver/nzbget/
    nzbget:
        container_name: nzbget
        image: linuxserver/nzbget:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONFIG_DIR}/nzbget:/config'
            - '${DOWNLOADS_DIR}:/downloads'
        ports:
            - '6789:6789/tcp'
        labels:
            traefik.enable: true
            traefik.port: 6789
            traefik.docker.network: traefik
            traefik.http.routers.nzbget.entrypoints: https
            traefik.http.routers.nzbget.tls.certresolver: le
            #traefik.http.routers.nzbget.rule: Host(`nzbget.${ACME_DOMAIN}`)
            #traefik.frontend.rule: (Host(`${ACME_DOMAIN}`) && Path(`/nzbget`))
            traefik.http.routers.nzbget.rule: (Host(`${ACME_DOMAIN}`) && Path(`/nzbget/`))
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/nzbget/`))

    # https://hub.docker.com/r/linuxserver/sonarr/
    sonarr:
        container_name: sonarr
        image: linuxserver/sonarr:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONFIG_DIR}/sonarr:/config'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        ports:
            - '8989:8989/tcp'
        labels:
            traefik.enable: true
            traefik.port: 8989
            traefik.docker.network: traefik
            #traefik.frontend.rule: 'Host:sonarr.${ACME_DOMAIN}'
            #traefik.frontend.rule: (Host(`${ACME_DOMAIN}`) && Path(`/sonarr`))
            traefik.http.routers.sonarr.entrypoints: https
            traefik.http.routers.sonarr.tls.certresolver: le
            #traefik.http.routers.sonarr.rule: Host(`sonarr.${ACME_DOMAIN}`)
            traefik.http.routers.sonarr.rule: (Host(`${ACME_DOMAIN}`) && Path(`/sonarr/`))
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/sonarr/`))

        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/radarr/
    radarr:
        container_name: radarr
        image: linuxserver/radarr:preview
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONFIG_DIR}/radarr:/config'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        ports:
            - '7878:7878/tcp'
        labels:
            traefik.enable: true
            traefik.port: 7878
            traefik.docker.network: traefik
            #traefik.frontend.rule: 'Host:radarr.${ACME_DOMAIN}'
            #traefik.frontend.rule: (Host(`${ACME_DOMAIN}`) && Path(`/radarr`))
            traefik.http.routers.radarr.entrypoints: https
            traefik.http.routers.radarr.tls.certresolver: le
            #traefik.http.routers.radarr.rule: Host(`radarr.${ACME_DOMAIN}`)
            traefik.http.routers.radarr.rule: (Host(`${ACME_DOMAIN}`) && Path(`/radarr/`))
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/radarr/`))

        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/hydra2/
    hydra:
        container_name: hydra
        image: linuxserver/hydra2:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONFIG_DIR}/hydra:/config'
            - '${DOWNLOADS_DIR}:/downloads'
        ports:
            - '5076:5076/tcp'
        labels:
            traefik.enable: true
            traefik.port: 5076
            traefik.docker.network: traefik
            traefik.http.routers.hydra.entrypoints: https
            traefik.http.routers.hydra.tls.certresolver: le
            #traefik.http.routers.hydra.rule: Host(`hydra.${ACME_DOMAIN}`)
            traefik.http.routers.hydra.rule: (Host(`${ACME_DOMAIN}`) && Path(`/hydra/`))
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/hydra/`))

    # https://hub.docker.com/_/traefik/
    traefik:
        container_name: traefik
        image: traefik:v2.1.0-rc2
        restart: unless-stopped
        environment:
            TZ: '${TZ}'
        networks:
            - traefik
        ports:
            - '80:80/tcp'
            - '443:443/tcp'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - 'traefik:/etc/traefik:rw'
        privileged: true
        command:
            - "--log.level=DEBUG"
            - "--api=true"
            - "--api.dashboard=true"
            - "--global.sendanonymoususage=false"
            - "--serverstransport.insecureskipverify"
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--certificatesresolvers.le.acme.dnsChallenge=true"
            - "--certificatesResolvers.le.acme.dnsChallenge.provider=cloudflare"
            - "--certificatesResolvers.le.acme.dnsChallenge.delayBeforeCheck=0"
            - "--certificatesResolvers.le.acme.storage=acme.json"
            #- "--certificatesResolvers.tlschallenge.acme.tlschallenge=true"
            #- "--certificatesresolvers.tlschallenge.acme.storage=/etc/traefik/acme.json"
            - "--certificatesresolvers.le.acme.email=${ACME_EMAIL}"
            - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
            - "--certificatesResolvers.le.acme.keyType=RSA4096"
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.traefik.entrypoints: https
            traefik.http.routers.traefik.tls.certresolver: le
            #traefik.http.routers.traefik.rule: Host(`traefik.${ACME_DOMAIN}`)
            #traefik.http.routers.traefik.rule: (Host(`${ACME_DOMAIN}`))
            traefik.http.routers.traefik.rule: (Host(`${ACME_DOMAIN}`) && Path(`/traefik/`))
            #traefik.frontend.rule: Host(`traefik.${ACME_DOMAIN}`)
            traefik.frontend.rule:  (Host(`${ACME_DOMAIN}`) && PathPrefixStrip(`/traefik/`))
            traefik.http.routers.traefik.middlewares: secureheaders, basicauth
            traefik.http.routers.traefik.middlewares: secureheaders
            traefik.http.routers.traefik.service: api@internal
            traefik.http.routers.http.entrypoints: http
            traefik.http.routers.http.rule: HostRegexp(`${ACME_DOMAIN}`, `{subdomain:[a-z]+}.${ACME_DOMAIN}`)
            traefik.http.routers.http.middlewares: redirectscheme
            traefik.http.middlewares.redirectscheme.redirectscheme.scheme: https
            traefik.http.middlewares.basicauth.basicauth.users: ${HTPASSWD}
            traefik.http.middlewares.secureheaders.headers.stsSeconds: 15552000
            traefik.http.middlewares.secureheaders.headers.framedeny: true
            traefik.http.middlewares.secureheaders.headers.sslForceHost: true
            traefik.http.middlewares.secureheaders.headers.sslRedirect: true
            traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains: true
            traefik.http.middlewares.secureheaders.headers.browserXssFilter: true
            traefik.http.middlewares.secureheaders.headers.contentTypeNosniff: true
            traefik.http.middlewares.secureheaders.headers.forceSTSHeader: true
            traefik.http.middlewares.secureheaders.headers.stsPreload: true
            traefik.http.middlewares.secureheaders.headers.customResponseHeaders.X-Robots-Tag: none
            traefik.http.middlewares.secureheaders.headers.customFrameOptionsValue: SAMEORIGIN

networks:
    traefik:
        name: traefik
        attachable: true

volumes:
    traefik: